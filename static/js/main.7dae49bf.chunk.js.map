{"version":3,"sources":["_styles.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["theme","primaryColor","primaryVariantColor","secondaryColor","secondaryVariantColor","background","hoverBackground","disabledText","error","backgroundOpacity","backgroundZIndex","titleFont","subtitleFont","titleHeight","window","innerWidth","Global","createGlobalStyle","_templateObject","Boolean","location","hostname","match","ReactDOM","render","react_default","a","createElement","styled_components_browser_esm","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4zHAEO,IAAMA,EAAQ,CACnBC,aAAc,UACdC,oBAAqB,UACrBC,eAAgB,UAChBC,sBAAuB,UACvBC,WAAY,OACZC,gBAAiB,kBACjBC,aAAc,OACdC,MAAO,UACPC,kBAAmB,IACnBC,iBAAkB,IAClBC,UAAW,YACXC,aAAc,SACdC,YAAaC,OAAOC,WAAa,IAAM,GAAK,IAGjCC,EAASC,YAAHC,IA0DDlB,EAAMK,WAULL,EAAMY,aASZZ,EAAMC,aAKND,EAAME,oBAKNF,EAAMG,eAQDH,EAAMC,aAIND,EAAMG,gBCzGJgB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cCAa,WAC3B,OACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAe5B,MAAOA,GACtByB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACEJ,EAAAC,EAAAC,cAACX,EAAD,MADF,iBDHY,MAASc,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7dae49bf.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const theme = {\r\n  primaryColor: '#bc7eb6',\r\n  primaryVariantColor: '#481346',\r\n  secondaryColor: '#90298d',\r\n  secondaryVariantColor: '#231f20',\r\n  background: '#fff',\r\n  hoverBackground: 'rgba(1,1,1,0.2)',\r\n  disabledText: '#aaa',\r\n  error: '#b00020',\r\n  backgroundOpacity: 0.33,\r\n  backgroundZIndex: 1000,\r\n  titleFont: 'Righteous',\r\n  subtitleFont: 'Roboto',\r\n  titleHeight: window.innerWidth > 700 ? 80 : 57\r\n}\r\n\r\nexport const Global = createGlobalStyle`\r\n  /* righteous-regular - latin */\r\n  @font-face {\r\n    font-family: 'Righteous';\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    src: url('/fonts/righteous-v6-latin-regular.eot'); /* IE9 Compat Modes */\r\n    src: local('Righteous'), local('Righteous-Regular'),\r\n        url('/fonts/righteous-v6-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n        url('/fonts/righteous-v6-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */\r\n        url('/fonts/righteous-v6-latin-regular.woff') format('woff'), /* Modern Browsers */\r\n        url('/fonts/righteous-v6-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */\r\n        url('/fonts/righteous-v6-latin-regular.svg#Righteous') format('svg'); /* Legacy iOS */\r\n  }\r\n\r\n  /* roboto-100 - latin */\r\n  @font-face {\r\n    font-family: 'Roboto';\r\n    font-style: normal;\r\n    font-weight: 100;\r\n    src: url('/fonts/roboto-v18-latin-100.eot'); /* IE9 Compat Modes */\r\n    src: local('Roboto Thin'), local('Roboto-Thin'),\r\n        url('/fonts/roboto-v18-latin-100.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n        url('/fonts/roboto-v18-latin-100.woff2') format('woff2'), /* Super Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-100.woff') format('woff'), /* Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-100.ttf') format('truetype'), /* Safari, Android, iOS */\r\n        url('/fonts/roboto-v18-latin-100.svg#Roboto') format('svg'); /* Legacy iOS */\r\n  }\r\n  /* roboto-300 - latin */\r\n  @font-face {\r\n    font-family: 'Roboto';\r\n    font-style: normal;\r\n    font-weight: 300;\r\n    src: url('/fonts/roboto-v18-latin-300.eot'); /* IE9 Compat Modes */\r\n    src: local('Roboto Light'), local('Roboto-Light'),\r\n        url('/fonts/roboto-v18-latin-300.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n        url('/fonts/roboto-v18-latin-300.woff2') format('woff2'), /* Super Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-300.woff') format('woff'), /* Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-300.ttf') format('truetype'), /* Safari, Android, iOS */\r\n        url('/fonts/roboto-v18-latin-300.svg#Roboto') format('svg'); /* Legacy iOS */\r\n  }\r\n  /* roboto-regular - latin */\r\n  @font-face {\r\n    font-family: 'Roboto';\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    src: url('/fonts/roboto-v18-latin-regular.eot'); /* IE9 Compat Modes */\r\n    src: local('Roboto'), local('Roboto-Regular'),\r\n        url('/fonts/roboto-v18-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n        url('/fonts/roboto-v18-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-regular.woff') format('woff'), /* Modern Browsers */\r\n        url('/fonts/roboto-v18-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */\r\n        url('/fonts/roboto-v18-latin-regular.svg#Roboto') format('svg'); /* Legacy iOS */\r\n  }\r\n\r\n  html,\r\n  body,\r\n  #root {\r\n    background: ${theme.background};\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    user-select: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-family: ${theme.subtitleFont};\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n\r\n  a {\r\n    color: ${theme.primaryColor};\r\n    text-decoration: none;\r\n  }\r\n\r\n  a:visited {\r\n    color: ${theme.primaryVariantColor};\r\n  }\r\n\r\n  a:hover,\r\n  a:visited:hover {\r\n    color: ${theme.secondaryColor};\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 9px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: ${theme.primaryColor};\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${theme.secondaryColor};\r\n  }\r\n`\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\n\r\nimport { ThemeProvider } from 'styled-components'\r\n\r\nimport { theme, Global } from './_styles'\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <>\r\n      <Global />\r\n      Hello world\r\n    </>\r\n  </ThemeProvider>\r\n  );\r\n}\r\n"],"sourceRoot":""}